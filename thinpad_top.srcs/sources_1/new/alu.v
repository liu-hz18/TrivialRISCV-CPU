`timescale 1ns / 1ps
`include "defines.v"

// ALU模块，组合逻辑
module alu(
    input wire rst,
    input wire[`AluOpWidth-1:0] alu_op_i,

    // 操作数
    input wire[`RegBus] src_a,
    input wire[`RegBus] src_b,

    output reg[`RegBus] result
);

reg cf;
reg zf;
reg sf;
reg vf;

always @(*) begin
    if (rst) begin
        result = `ZERO_WORD;
        {cf, zf, sf, vf} = 4'b0000;
    end else begin
        result = `ZERO_WORD;
        {cf, zf, sf, vf} = 4'b0000;
        case (alu_op_i) 
        `ALU_OP_ADD: begin
            {cf, result} = src_a + src_b;
            vf = src_a[`WordWidth-1] ^ src_b[`WordWidth-1] ^ result[`WordWidth-1] ^ cf;
        end
        `ALU_OP_SUB: begin
            {cf, result} = src_a - src_b;
            vf = src_a[`WordWidth-1] ^ src_b[`WordWidth-1] ^ result[`WordWidth-1] ^ cf;
        end
        `ALU_OP_AND: begin
            result = src_a & src_b;
        end
        `ALU_OP_OR: begin
            result = src_a | src_b;
        end
        `ALU_OP_XOR: begin
            result = src_a ^ src_b;
        end
        `ALU_OP_SLL: begin
            result = src_a << src_b;
        end
        `ALU_OP_SRL: begin
            result = src_a >> src_b;
        end
        `ALU_OP_JALR: begin
            result = (src_a + src_b) & (~32'h0000_0001);
        end
        `ALU_OP_MIN: begin
            result = (src_a < src_b) ? src_a : src_b;
        end
        `ALU_OP_CTZ: begin
            case(src_a)
            32'b????_????_????_????_????_????_????_???1: begin result = 0; end
            32'b????_????_????_????_????_????_????_??10: begin result = 1; end
            32'b????_????_????_????_????_????_????_?100: begin result = 2; end
            32'b????_????_????_????_????_????_????_1000: begin result = 3; end
            32'b????_????_????_????_????_????_???1_0000: begin result = 4; end
            32'b????_????_????_????_????_????_??10_0000: begin result = 5; end
            32'b????_????_????_????_????_????_?100_0000: begin result = 6; end
            32'b????_????_????_????_????_????_1000_0000: begin result = 7; end
            32'b????_????_????_????_????_???1_0000_0000: begin result = 8; end
            32'b????_????_????_????_????_??10_0000_0000: begin result = 9; end
            32'b????_????_????_????_????_?100_0000_0000: begin result = 10; end
            32'b????_????_????_????_????_1000_0000_0000: begin result = 11; end
            32'b????_????_????_????_???1_0000_0000_0000: begin result = 12; end
            32'b????_????_????_????_??10_0000_0000_0000: begin result = 13; end
            32'b????_????_????_????_?100_0000_0000_0000: begin result = 14; end
            32'b????_????_????_????_1000_0000_0000_0000: begin result = 15; end
            32'b????_????_????_???1_0000_0000_0000_0000: begin result = 16; end
            32'b????_????_????_??10_0000_0000_0000_0000: begin result = 17; end
            32'b????_????_????_?100_0000_0000_0000_0000: begin result = 18; end
            32'b????_????_????_1000_0000_0000_0000_0000: begin result = 19; end
            32'b????_????_???1_0000_0000_0000_0000_0000: begin result = 20; end
            32'b????_????_??10_0000_0000_0000_0000_0000: begin result = 21; end
            32'b????_????_?100_0000_0000_0000_0000_0000: begin result = 22; end
            32'b????_????_1000_0000_0000_0000_0000_0000: begin result = 23; end
            32'b????_???1_0000_0000_0000_0000_0000_0000: begin result = 24; end
            32'b????_??10_0000_0000_0000_0000_0000_0000: begin result = 25; end
            32'b????_?100_0000_0000_0000_0000_0000_0000: begin result = 26; end
            32'b????_1000_0000_0000_0000_0000_0000_0000: begin result = 27; end
            32'b???1_0000_0000_0000_0000_0000_0000_0000: begin result = 28; end
            32'b??10_0000_0000_0000_0000_0000_0000_0000: begin result = 29; end
            32'b?100_0000_0000_0000_0000_0000_0000_0000: begin result = 30; end
            32'b1000_0000_0000_0000_0000_0000_0000_0000: begin result = 31; end
            32'b0000_0000_0000_0000_0000_0000_0000_0000: begin result = 32; end
            endcase
        end
        `ALU_OP_SBCLR: begin
            result = src_a & ~(32'h0000_0001 << (src_b & 31));
        end
        default: begin
            // do nothing
        end
        endcase
        sf = result[`WordWidth-1];
        zf = (result == `ZERO_WORD) ? 1'b1 : 1'b0;
    end
end

endmodule
